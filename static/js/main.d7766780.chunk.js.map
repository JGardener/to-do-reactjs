{"version":3,"sources":["Components/Item/Item.js","Components/List/List.js","App.js","serviceWorker.js","index.js"],"names":["Item","data","removeItem","isList","className","onClick","title","List","useState","itemIsList","toggleItemIsList","items","updateItems","item","index","findIndex","listItem","target","innerHTML","console","log","newArray","splice","type","placeholder","onKeyPress","e","key","push","value","slice","checked","onChange","map","toDo","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAuBeA,EApBF,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,WACpB,OAAID,EAAKE,OAEL,yBAAKC,UAAU,YACb,wBAAIA,UAAU,YAAYC,QAASH,GAChCD,EAAKK,OAER,kBAAC,EAAD,OAKJ,6BACE,wBAAIF,UAAU,QAAQC,QAASH,GAC5BD,EAAKK,SCkDCC,G,MA/DF,WAAO,IAAD,EACsBC,oBAAS,GAD/B,mBACVC,EADU,KACEC,EADF,OAEYF,mBAAS,IAFrB,mBAEVG,EAFU,KAEHC,EAFG,KAwBXV,EAAa,SAAAW,GACjB,IAAMC,EAAQH,EAAMI,WAAU,SAAAC,GAC5B,OAAOH,EAAKI,OAAOC,YAAcF,EAASV,SAG5Ca,QAAQC,IAAIN,GAEZ,IAAIO,EAAW,GAOf,OANIP,GAAS,IACXH,EAAMW,OAAOR,EAAO,GACpBO,EAAQ,YAAOV,GACfC,EAAYS,IAEdF,QAAQC,IAAIC,GACLA,GAQT,OACE,yBAAKjB,UAAU,QACb,2BACEA,UAAU,cACVmB,KAAK,OACLC,YAAY,wBACZC,WAhDU,SAAAC,GACA,UAAVA,EAAEC,MACJhB,EAAMiB,KAAK,CACTtB,MAAOoB,EAAET,OAAOY,MAChB1B,OAAQM,IAEVG,EAAYD,EAAMmB,MAAM,IACxBJ,EAAET,OAAOY,MAAQ,GACjBnB,GAAiB,GACjBS,QAAQC,IAAIT,OAyCZ,2BAAOY,KAAK,WAAWQ,QAAStB,EAAYuB,SAbzB,SAAAN,GAErBhB,EAAiBgB,EAAET,OAAOc,YAYxB,0BAAM3B,UAAU,cAAhB,+BACCO,EAAMsB,KAAI,SAAAC,GAAI,OACb,kBAAC,EAAD,CAAMjC,KAAMiC,EAAMhC,WAAYA,U,KC3CvBiC,MAZf,WACE,OACE,yBAAK/B,UAAU,OACb,wBAAIA,UAAU,aAAd,sIAIA,kBAAC,EAAD,QCDcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d7766780.chunk.js","sourcesContent":["import React from \"react\";\r\nimport List from \"../List/List\";\r\n\r\nconst Item = ({ data, removeItem }) => {\r\n  if (data.isList) {\r\n    return (\r\n      <div className=\"sub-list\">\r\n        <li className=\"sub-title\" onClick={removeItem}>\r\n          {data.title}\r\n        </li>\r\n        <List />\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      <li className=\"title\" onClick={removeItem}>\r\n        {data.title}\r\n      </li>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Item;\r\n","import React, { useState } from \"react\";\r\nimport Item from \"../Item/Item\";\r\nimport \"./List.css\";\r\n\r\nconst List = () => {\r\n  const [itemIsList, toggleItemIsList] = useState(false);\r\n  const [items, updateItems] = useState([]);\r\n\r\n  const addItem = e => {\r\n    if (e.key === \"Enter\") {\r\n      items.push({\r\n        title: e.target.value,\r\n        isList: itemIsList\r\n      });\r\n      updateItems(items.slice(0));\r\n      e.target.value = \"\";\r\n      toggleItemIsList(false);\r\n      console.log(items);\r\n    }\r\n  };\r\n\r\n  // This is where it got really complicated for me.\r\n  // I needed to make a second array so React knew to re-render.\r\n  // The original array was being modified, sure, but React didn't see the difference, I guess.\r\n\r\n  // newArray takes the changes to state: items\r\n  // we then update state:items to whatever is inside newArray\r\n  // Fun!\r\n  const removeItem = item => {\r\n    const index = items.findIndex(listItem => {\r\n      return item.target.innerHTML === listItem.title;\r\n    });\r\n\r\n    console.log(index);\r\n\r\n    let newArray = [];\r\n    if (index > -1) {\r\n      items.splice(index, 1);\r\n      newArray = [...items];\r\n      updateItems(newArray);\r\n    }\r\n    console.log(newArray);\r\n    return newArray;\r\n  };\r\n\r\n  const toggleCheckbox = e => {\r\n    // console.log(e.target.checked);\r\n    toggleItemIsList(e.target.checked);\r\n  };\r\n\r\n  return (\r\n    <div className=\"list\">\r\n      <input\r\n        className=\"to-do-input\"\r\n        type=\"text\"\r\n        placeholder=\"Please enter a To-Do.\"\r\n        onKeyPress={addItem}\r\n      />\r\n      <input type=\"checkbox\" checked={itemIsList} onChange={toggleCheckbox} />\r\n      <span className=\"list-check\"> Is this item another list?</span>\r\n      {items.map(toDo => (\r\n        <Item data={toDo} removeItem={removeItem} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React from \"react\";\nimport List from \"./Components/List/List\";\nimport \"./App.css\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h4 className=\"app-title\">\n        This is your ToDo list. Click on an item to delete it. Make lists within\n        lists by clicking on the checkbox before entering a ToDo.\n      </h4>\n      <List />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}